{"ast":null,"code":"import _objectSpread from \"/Users/yokohamakaito/Desktop/hasuraLearning/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/yokohamakaito/Desktop/hasuraLearning/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/yokohamakaito/Desktop/hasuraLearning/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/yokohamakaito/Desktop/hasuraLearning/src/components/Todo/TodoPrivateList.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nquery getMyTodos {\\n  todos(where:{is_public:{_eq:false}},order_by:{created_at:desc}){\\n    id\\n    title\\n    created_at\\n    is_completed\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, Fragment } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport TodoFilters from \"./TodoFilters\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from '@apollo/client';\nvar GET_MY_TODOS = gql(_templateObject());\n\nvar TodoPrivateList = function TodoPrivateList(props) {\n  var _useState = useState({\n    filter: \"all\",\n    clearInProgress: false,\n    todos: [{\n      id: \"1\",\n      title: \"This is private todo 1\",\n      is_completed: true,\n      is_public: false\n    }, {\n      id: \"2\",\n      title: \"This is private todo 2\",\n      is_completed: false,\n      is_public: false\n    }]\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var filterResults = function filterResults(filter) {\n    setState(_objectSpread({}, state, {\n      filter: filter\n    }));\n  };\n\n  var clearCompleted = function clearCompleted() {};\n\n  var todos = props.todos;\n  var filteredTodos = todos;\n\n  if (state.filter === \"active\") {\n    filteredTodos = todos.filter(function (todo) {\n      return todo.is_completed !== true;\n    });\n  } else if (state.filter === \"completed\") {\n    filteredTodos = todos.filter(function (todo) {\n      return todo.is_completed === true;\n    });\n  }\n\n  var todoList = [];\n  filteredTodos.forEach(function (todo, index) {\n    todoList.push(React.createElement(TodoItem, {\n      key: index,\n      index: index,\n      todo: todo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"todoListWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, todoList)), React.createElement(TodoFilters, {\n    todos: filteredTodos,\n    currentFilter: state.filter,\n    filterResultsFn: filterResults,\n    clearCompletedFn: clearCompleted,\n    clearInProgress: state.clearInProgress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n};\n\nvar TodoPrivateListQuery = function TodoPrivateListQuery() {\n  var _useQuery = useQuery(GET_MY_TODOS),\n      _useQuery2 = _slicedToArray(_useQuery, 3),\n      loading = _useQuery2[0],\n      error = _useQuery2[1],\n      data = _useQuery2[2];\n\n  if (loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"loading\");\n  }\n\n  if (error) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Error!\");\n  }\n\n  return React.createElement(TodoPrivateList, {\n    todos: data.todos,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  });\n};\n\nexport default TodoPrivateList;","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/hasuraLearning/src/components/Todo/TodoPrivateList.js"],"names":["React","useState","Fragment","TodoItem","TodoFilters","gql","useQuery","GET_MY_TODOS","TodoPrivateList","props","filter","clearInProgress","todos","id","title","is_completed","is_public","state","setState","filterResults","clearCompleted","filteredTodos","todo","todoList","forEach","index","push","TodoPrivateListQuery","loading","error","data"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from \"react\";\n\nimport TodoItem from \"./TodoItem\";\nimport TodoFilters from \"./TodoFilters\";\nimport gql from \"graphql-tag\"\n import { useQuery } from '@apollo/client';\n\nconst GET_MY_TODOS = gql`\nquery getMyTodos {\n  todos(where:{is_public:{_eq:false}},order_by:{created_at:desc}){\n    id\n    title\n    created_at\n    is_completed\n  }\n}\n`\nconst TodoPrivateList = props => {\n  const [state, setState] = useState({\n    filter: \"all\",\n    clearInProgress: false,\n    todos: [\n      {\n        id: \"1\",\n        title: \"This is private todo 1\",\n        is_completed: true,\n        is_public: false\n      },\n      {\n        id: \"2\",\n        title: \"This is private todo 2\",\n        is_completed: false,\n        is_public: false\n      }\n    ]\n  });\n\n  const filterResults = filter => {\n    setState({\n      ...state,\n      filter: filter\n    });\n  };\n\n  const clearCompleted = () => {};\n  const {todos} = props; \n  let filteredTodos = todos;\n  if (state.filter === \"active\") {\n    filteredTodos = todos.filter(todo => todo.is_completed !== true);\n  } else if (state.filter === \"completed\") {\n    filteredTodos = todos.filter(todo => todo.is_completed === true);\n  }\n\n  const todoList = [];\n  filteredTodos.forEach((todo, index) => {\n    todoList.push(<TodoItem key={index} index={index} todo={todo} />);\n  });\n\n  return (\n    <Fragment>\n      <div className=\"todoListWrapper\">\n        <ul>{todoList}</ul>\n      </div>\n\n      <TodoFilters\n        todos={filteredTodos}\n        currentFilter={state.filter}\n        filterResultsFn={filterResults}\n        clearCompletedFn={clearCompleted}\n        clearInProgress={state.clearInProgress}\n      />\n    </Fragment>\n  );\n};\nconst TodoPrivateListQuery = () =>{\n    const [loading,error,data] = useQuery(GET_MY_TODOS);\n\n    if(loading){\n      return <div>loading</div>\n    }\n    if(error){\n      return <div>Error!</div>\n    }\n    return <TodoPrivateList todos={data.todos} />\n}\nexport default TodoPrivateList;\n"]},"metadata":{},"sourceType":"module"}